/* eslint-disable react/jsx-key */
import { Flex, Table } from "@mantine/core";
import Head from "next/head";
//@ts-ignore
import { ComposableMap, Geographies, Geography } from "react-simple-maps"

const geoUrl =
  "https://raw.githubusercontent.com/deldersveld/topojson/master/world-countries.json"

import {
  Key,
  ReactElement,
  JSXElementConstructor,
  ReactFragment,
  ReactPortal,
} from "react";



export default function Home(
  {...launches}) { 
    console.log(launches)
  return (
    <>
      <Head>
        <title>Buffalogs</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
<h2>
   Welcome, User
</h2>
<Flex

      
      gap="md"
      justify="flex-end"
      align="center"
      direction="column"
      wrap="wrap"
    >
           <div style={{ height: '100%', width: '60%' }}>

<Flex
      mih={50}
      bg="rgba(0,0,0,0)"
      gap="md"
      justify="center"
      align="center"
      direction="column"
      wrap="wrap"
    >
     <ComposableMap>
      <Geographies geography={geoUrl}>
        {({ geographies } : {geographies: any}) =>
          geographies.map((geo: { rsmKey: Key | null | undefined; }) => (
            <Geography key={geo.rsmKey} geography={geo} />
          ))
        }
      </Geographies>
    </ComposableMap>
    </Flex>
</div>
<div style={{ height: '100%' }}>
<Table>
  <thead> 
    <tr>  
      <th>Location</th>
      <th>From</th>
      <th>Timestamp</th>
      <th>Country</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Los Angeles</td>
      <td>192.168.1.1</td>
      <td>2023-03-31 10:23:45</td>
      <td>United States</td>
    </tr>
    <tr>
      <td>Tokyo</td>
      <td>203.0.113.1</td>
      <td>2023-03-29 19:15:30</td>
      <td>Japan</td>
    </tr>
    <tr>
      <td>Sydney</td>
      <td>49.180.100.1</td>
      <td>2023-03-28 16:45:20</td>
      <td>Australia</td>
    </tr>
    <tr>
      <td>London</td>
      <td>77.240.23.1</td>
      <td>2023-03-27 08:10:10</td>
      <td>United Kingdom</td>
    </tr>
  </tbody>
</Table>
</div>

    </Flex>

{/* <Flex
  gap="md"
  justify="flex-end"
  align="center"
  direction="row" // set direction to "row"
  wrap="wrap"
>
  <div style={{ width: '100%' }}> 
    <Flex
      mih={50}
      bg="rgba(0,0,0,0)"
      gap="md"
      justify="center"
      align="center"
      direction="column"
      wrap="wrap"
    >
      <ComposableMap>
        <Geographies geography={geoUrl}>
          {({ geographies } : {geographies: any}) =>
            geographies.map((geo: { rsmKey: Key | null | undefined; }) => (
              <Geography key={geo.rsmKey} geography={geo} />
            ))
          }
        </Geographies>
      </ComposableMap>
    </Flex>
  </div>
  <div style={{ width: '100%' }}> 
    <Table>
      <thead> 
        <tr>  
          <th>Location</th>
          <th>From</th>
          <th>Timestamp</th>
          <th>Country</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Los Angeles</td>
          <td>192.168.1.1</td>
          <td>2023-03-31 10:23:45</td>
          <td>United States</td>
        </tr>
        <tr>
          <td>Tokyo</td>
          <td>203.0.113.1</td>
          <td>2023-03-29 19:15:30</td>
          <td>Japan</td>
        </tr>
        <tr>
          <td>Sydney</td>
          <td>49.180.100.1</td>
          <td>2023-03-28 16:45:20</td>
          <td>Australia</td>
        </tr>
        <tr>
          <td>London</td>
          <td>77.240.23.1</td>
          <td>2023-03-27 08:10:10</td>
          <td>United Kingdom</td>
        </tr>
      </tbody>
    </Table>
  </div>
</Flex> */}



      {/* {
      launches.map(
        (launch) => {
          return (
            <h3>{launch.timestamp}</h3>
          );
        }
      )} */}



    </>
  );
}

// export async function getStaticProps() {
//   //this func is first getting the data through the graphql client,
//   // storing it in destructured {data}

//   const Client = new ApolloClient({
//     uri: `https://api.thegraph.com/subgraphs/name/messari/sushiswap-polygon`,
//     cache: new InMemoryCache(),
//   });

//   const { data } = await Client.query({
//     query: gql`
//       {
//         deposits(
//           where: { from: "0xd5da26eae4448e5be3a1133bad3e7a76e86efeb3" }
//         ) {
//           timestamp
//           from
//           inputTokens {
//             id
//             name
//           }
//           outputToken {
//             id
//             name
//           }
//           inputTokenAmounts
//           outputTokenAmount
//           amountUSD
//         }

//         withdraws(
//           where: { from: "0xd5da26eae4448e5be3a1133bad3e7a76e86efeb3" }
//         ) {
//           timestamp
//           from
//           inputTokens {
//             id
//             name
//           }
//           outputToken {
//             id
//             name
//           }
//           inputTokenAmounts
//           outputTokenAmount
//           amountUSD
//         }
//       }
//     `,
//   });

//   console.log("data", data.deposits);
//   //what does props do here?
//   return {
//     props: {
//       launches: data.deposits,
//     },
//   };
// }
